diff --git a/src/cloud.ts b/src/cloud.ts
index 2807731e7e1ad306f91fb9cf2f5822b042601f41..6bb3e62f28d3cc96a677f5c92f59d2e4e2496877 100644
--- a/src/cloud.ts
+++ b/src/cloud.ts
@@ -9,11 +9,13 @@ import {
 } from './interfaces'
 import { encodeParams, generateRandomString } from './utils'
 
-const SECRET = '23x17ahWarFH6w29'
-const MEROSS_URL = 'https://iot.meross.com'
-const LOGIN_URL = MEROSS_URL + '/v1/Auth/Login'
+// const SECRET = '23x17ahWarFH6w29'
+const MEROSS_URL = 'https://iotx.meross.com'
+const LOGIN_URL = MEROSS_URL + '/v1/Auth/signIn'
 const DEV_LIST = MEROSS_URL + '/v1/Device/devList'
 const SUBDEV_LIST = MEROSS_URL + '/v1/Hub/getSubDevices'
+const SECRET = '23x17ahWarFH6w29';
+
 
 export class MerossCloud extends EventEmitter {
     options: CloudOptions
@@ -45,13 +47,21 @@ export class MerossCloud extends EventEmitter {
         // Generate the md5-hash (called signature)
         const datatosign = SECRET + timestampMillis + nonce + loginParams
         const md5hash = createHash('md5').update(datatosign).digest('hex')
+        // const headers = {
+        //     Authorization: 'Basic ' + (this.token || ''),
+        //     vender: 'Meross',
+        //     AppVersion: '1.3.0',
+        //     AppLanguage: 'EN',
+        //     'User-Agent': 'okhttp/3.6.0'
+        // }
         const headers = {
-            Authorization: 'Basic ' + (this.token || ''),
-            vender: 'Meross',
-            AppVersion: '1.3.0',
-            AppLanguage: 'EN',
-            'User-Agent': 'okhttp/3.6.0'
-        }
+            "Authorization": `Basic ${this.token || ''}`,
+            "Vendor": "meross",
+            "AppVersion": "3.22.4",
+            "AppType": "iOS",
+            "AppLanguage": "en",
+            "User-Agent": "intellect_socket/3.22.4 (iPhone; iOS 17.2; Scale/2.00)"
+        };
 
         const options: GotOptions = {
             method: 'POST',
@@ -72,7 +82,7 @@ export class MerossCloud extends EventEmitter {
         this.options.logger && this.options.logger('HTTP-Response OK: ' + response.rawBody.toString())
 
         const { body } = response
-        if (body.info !== 'Success') throw new Error(`apiStatus: ${body.apiStatus}: ${body.info}`)
+        if (body.apiStatus !== 0) throw new Error(`apiStatus: ${body.apiStatus}: ${body.info}`)
         return body.data
     }
 
@@ -88,7 +98,7 @@ export class MerossCloud extends EventEmitter {
         deviceObj.on('data', (namespace, payload) => this.emit('data', deviceId, namespace, payload))
         deviceObj.on('rawData', (message) => this.emit('rawData', deviceId, message))
         this.emit('deviceInitialized', deviceId, dev, deviceObj)
-        deviceObj.connect()
+        // deviceObj.connect()
         return deviceObj
     }
 
diff --git a/src/device.ts b/src/device.ts
index 2ad31e3654261e36f4ab218143bce5b7a298b84d..93903dea19fd23b07f50bc0fd2b263b2ad6662d6 100644
--- a/src/device.ts
+++ b/src/device.ts
@@ -112,7 +112,7 @@ export class MerossCloudDevice extends EventEmitter {
               const namespace = decodedMessage.header ? decodedMessage.header.namespace : ''
               this.emit('data', namespace, message)
           }
-          this.emit('rawData', message)
+          this.emit('rawData', decodedMessage)
       })
       this.client.on('error', (error) => {
           this.emit('error', error ? error.toString() : null)
@@ -179,7 +179,7 @@ export class MerossCloudDevice extends EventEmitter {
           payload: payload
       }
       this.client.publish('/appliance/' + this.dev.uuid + '/subscribe', JSON.stringify(data))
-      this.emit('rawSendData', data)
+    //   this.emit('rawSendData', data)
 
       // the resolving function gets saved in the messageId database
       this.waitingMessageIds[messageId] = commandResolve!
